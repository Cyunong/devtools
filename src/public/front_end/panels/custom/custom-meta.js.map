{"version":3,"file":"custom-meta.js","sourceRoot":"","sources":["../../../../../../chrome-devtools/front_end/panels/custom/custom-meta.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,sDAAsD;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAIhD,MAAM,SAAS,GAAG;IACd;;MAEE;IACF,MAAM,EAAE,aAAa;IACrB;;MAEE;IACF,UAAU,EAAE,aAAa;CAC5B,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;AACpF,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACxF,IAAI,kBAA6C,CAAC;AAClD,KAAK,UAAU,gBAAgB;IAC3B,IAAI,CAAC,kBAAkB,EAAE;QACrB,8CAA8C;QAC9C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7C,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;QAEzE,kBAAkB,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,CAAC;QACjD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACnC;IACD,OAAO,kBAAkB,CAAC;AAC9B,CAAC;AACD,mHAAmH;AACnH,6CAA6C;AAC7C,iBAAiB;AACjB,MAAM;AACN,kDAAkD;AAClD,IAAI;AACJ,MAAM,UAAU,GAAa,IAAI,CAAC,KAAK,CACrC,kBAAkB,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAClF,CAAC;AACF,IAAG,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;IAC3C,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;QACjC,QAAQ,qBAAyC,CAAC,WAAW;QAC7D,EAAE,EAAE,oBAAoB;QACxB,KAAK,EAAE,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;QACvC,aAAa,EAAE,cAAc,CAAC,SAAS,CAAC,UAAU,CAAC;QACnD,KAAK,EAAE,EAAE;QACT,KAAK,CAAC,QAAQ;YACV,MAAM,MAAM,GAAG,MAAM,gBAAgB,EAAE,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,OAAO,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACrD,CAAC;KACJ,CAAC,CAAC;CACJ","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// import * as Common from '../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport type * as Custom from './custom.js';\n\nconst UIStrings = {\n    /**\n    *@description Title of the Console tool\n    */\n    custom: 'Core Memory',\n    /**\n    *@description Title of an action that shows the console.\n    */\n    showCustom: 'Show Custom',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/custom/custom-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nlet loadedCustomModule: (typeof Custom|undefined);\nasync function loadCustomModule() {\n    if (!loadedCustomModule) {\n        // Side-effect import resources in module.json\n        console.log(Root.Runtime.Runtime.instance());\n        await Root.Runtime.Runtime.instance().loadModulePromise('panels/custom');\n\n        loadedCustomModule = await import('./custom.js');\n        console.log(loadedCustomModule);\n    }\n    return loadedCustomModule;\n}\n// function maybeRetrieveContextTypes<T = unknown>(getClassCallBack: (consoleModule: typeof Console) => T[]): T[] {\n//   if (loadedConsoleModule === undefined) {\n//     return [];\n//   }\n//   return getClassCallBack(loadedConsoleModule);\n// }\nconst customTabs: string[] = JSON.parse(\n  decodeURIComponent(new URL(location.href).searchParams.get('customTabs') || '[]'),\n);\nif(customTabs.indexOf('core-memory') !== -1) {\n  UI.ViewManager.registerViewExtension({\n      location: UI.ViewManager.ViewLocationValues.PANEL /* PANEL */,\n      id: 'custom-core-memory',\n      title: i18nLazyString(UIStrings.custom),\n      commandPrompt: i18nLazyString(UIStrings.showCustom),\n      order: 20,\n      async loadView() {\n          const Custom = await loadCustomModule();\n          console.log(Custom);\n          return Custom.CustomPanel.CustomPanel.instance();\n      },\n  });\n}\n"]}