{"version":3,"file":"custom-meta.js","sourceRoot":"","sources":["../../../../../../chrome-devtools/front_end/panels/custom/custom-meta.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// import * as Common from '../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport type * as Custom from './custom.js';\n\nconst UIStrings = {\n    /**\n    *@description Title of the Console tool\n    */\n    custom: 'Core Memory',\n    /**\n    *@description Title of an action that shows the console.\n    */\n    showCustom: 'Show Custom',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/custom/custom-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nlet loadedCustomModule: (typeof Custom|undefined);\nasync function loadCustomModule() {\n    if (!loadedCustomModule) {\n        // Side-effect import resources in module.json\n        console.log(Root.Runtime.Runtime.instance());\n        await Root.Runtime.Runtime.instance().loadModulePromise('panels/custom');\n\n        loadedCustomModule = await import('./custom.js');\n        console.log(loadedCustomModule);\n    }\n    return loadedCustomModule;\n}\n// function maybeRetrieveContextTypes<T = unknown>(getClassCallBack: (consoleModule: typeof Console) => T[]): T[] {\n//   if (loadedConsoleModule === undefined) {\n//     return [];\n//   }\n//   return getClassCallBack(loadedConsoleModule);\n// }\nUI.ViewManager.registerViewExtension({\n    location: UI.ViewManager.ViewLocationValues.PANEL /* PANEL */,\n    id: 'custom',\n    title: i18nLazyString(UIStrings.custom),\n    commandPrompt: i18nLazyString(UIStrings.showCustom),\n    order: 20,\n    async loadView() {\n        const Custom = await loadCustomModule();\n        console.log(Custom);\n        return Custom.CustomPanel.CustomPanel.instance();\n    },\n});\n// UI.ViewManager.registerViewExtension({\n//     location: \"drawer-view\" /* DRAWER_VIEW */,\n//     id: 'console-view',\n//     title: i18nLazyString(UIStrings.console),\n//     commandPrompt: i18nLazyString(UIStrings.showCustom),\n//     persistence: \"permanent\" /* PERMANENT */,\n//     order: 0,\n//     async loadView() {\n//         const Console = await loadConsoleModule();\n//         return Console.ConsolePanel.WrapperView.instance();\n//     },\n// });\n// UI.ActionRegistration.registerActionExtension({\n//     actionId: 'custom.show',\n//     category: UI.ActionRegistration.ActionCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.showConsole),\n//     async loadActionDelegate() {\n//         const Console = await loadConsoleModule();\n//         return Console.ConsoleView.ActionDelegate.instance();\n//     },\n//     bindings: [\n//         {\n//             shortcut: 'Ctrl+`',\n//             keybindSets: [\n//                 \"devToolsDefault\" /* DEVTOOLS_DEFAULT */,\n//                 \"vsCode\" /* VS_CODE */,\n//             ],\n//         },\n//     ],\n// });\n// UI.ActionRegistration.registerActionExtension({\n//     actionId: 'custom.clear',\n//     category: UI.ActionRegistration.ActionCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.clearConsole),\n//     iconClass: \"largeicon-clear\" /* LARGEICON_CLEAR */,\n//     async loadActionDelegate() {\n//         const Console = await loadConsoleModule();\n//         return Console.ConsoleView.ActionDelegate.instance();\n//     },\n//     contextTypes() {\n//         return maybeRetrieveContextTypes(Console => [Console.ConsoleView.ConsoleView]);\n//     },\n//     bindings: [\n//         {\n//             shortcut: 'Ctrl+L',\n//         },\n//         {\n//             shortcut: 'Meta+K',\n//             platform: \"mac\" /* Mac */,\n//         },\n//     ],\n// });\n// UI.ActionRegistration.registerActionExtension({\n//     actionId: 'custom.clear.history',\n//     category: UI.ActionRegistration.ActionCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.clearConsoleHistory),\n//     async loadActionDelegate() {\n//         const Console = await loadConsoleModule();\n//         return Console.ConsoleView.ActionDelegate.instance();\n//     },\n// });\n// UI.ActionRegistration.registerActionExtension({\n//     actionId: 'custom.create-pin',\n//     category: UI.ActionRegistration.ActionCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.createLiveExpression),\n//     iconClass: \"largeicon-visibility\" /* LARGEICON_VISIBILITY */,\n//     async loadActionDelegate() {\n//         const Console = await loadConsoleModule();\n//         return Console.ConsoleView.ActionDelegate.instance();\n//     },\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.hideNetworkMessages),\n//     settingName: 'hideNetworkMessages',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: false,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.hideNetworkMessages),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.showNetworkMessages),\n//         },\n//     ],\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.selectedContextOnly),\n//     settingName: 'selectedContextFilterEnabled',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: false,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.onlyShowMessagesFromTheCurrent),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.showMessagesFromAllContexts),\n//         },\n//     ],\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.logXmlhttprequests),\n//     settingName: 'monitoringXHREnabled',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: false,\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.showTimestamps),\n//     settingName: 'consoleTimestampsEnabled',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: false,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.showTimestamps),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.hideTimestamps),\n//         },\n//     ],\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.autocompleteFromHistory),\n//     settingName: 'consoleHistoryAutocomplete',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: true,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.autocompleteFromHistory),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.doNotAutocompleteFromHistory),\n//         },\n//     ],\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.groupSimilarMessagesInConsole),\n//     settingName: 'consoleGroupSimilar',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: true,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.groupSimilarMessagesInConsole),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.doNotGroupSimilarMessagesIn),\n//         },\n//     ],\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.eagerEvaluation),\n//     settingName: 'consoleEagerEval',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: true,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.eagerlyEvaluateConsolePromptText),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.doNotEagerlyEvaluateConsole),\n//         },\n//     ],\n// });\n// Common.Settings.registerSettingExtension({\n//     category: Common.Settings.SettingCategory.CONSOLE,\n//     title: i18nLazyString(UIStrings.evaluateTriggersUserActivation),\n//     settingName: 'consoleUserActivationEval',\n//     settingType: Common.Settings.SettingType.BOOLEAN,\n//     defaultValue: true,\n//     options: [\n//         {\n//             value: true,\n//             title: i18nLazyString(UIStrings.treatEvaluationAsUserActivation),\n//         },\n//         {\n//             value: false,\n//             title: i18nLazyString(UIStrings.doNotTreatEvaluationAsUser),\n//         },\n//     ],\n// });\n// Common.Revealer.registerRevealer({\n//     contextTypes() {\n//         return [\n//             Common.Console.Console,\n//         ];\n//     },\n//     async loadRevealer() {\n//         const Console = await loadConsoleModule();\n//         return Console.ConsolePanel.ConsoleRevealer.instance();\n//     },\n//     destination: undefined,\n// });\n//# sourceMappingURL=console-meta.js.map\n"]}